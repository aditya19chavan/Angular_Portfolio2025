"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildWithPlugin = void 0;
const architect_1 = require("@angular-devkit/architect");
const build_angular_1 = require("@angular-devkit/build-angular");
// import { plugin } from "../utils/webpack-plugin";
const rxjs_1 = require("rxjs");
const project_1 = require("../utils/project");
const core_1 = require("@dotenv-run/core");
const get_environment_1 = require("../utils/get-environment");
const webpack_plugin_1 = require("../utils/webpack-plugin");
const schema_1 = require("@angular-devkit/build-angular/src/builders/karma/schema");
// import { getEnvironment } from "../utils/get-environment";
// import { env } from "@dotenv-run/core";
const buildWithPlugin = (options, context) => {
    return (0, rxjs_1.from)((0, project_1.getProjectCwd)(context)).pipe((0, rxjs_1.switchMap)((cwd) => {
        const { full } = (0, core_1.env)(Object.assign(Object.assign({}, options.ngxEnv), { cwd, environment: (0, get_environment_1.getEnvironment)(context.target.configuration) }));
        switch (options.builderMode) {
            case "application":
            case "detect":
                console.warn("@ngx-env/builder:");
                console.warn(" Application builder is not supported yet due to a limitation in the Angular CLI. ");
                console.warn(" Falling back to the Browser builder.");
                // (options as any).define = full;
                // Does not work with application builder yet see: https://github.com/chihab/dotenv-run/issues/113 and https://github.com/angular/angular-cli/issues/29003
                return (0, build_angular_1.executeKarmaBuilder)(Object.assign(Object.assign({}, options), { builderMode: schema_1.BuilderMode.Browser }), context, (0, webpack_plugin_1.plugin)(full));
            case "browser":
                return (0, build_angular_1.executeKarmaBuilder)(options, context, (0, webpack_plugin_1.plugin)(full));
            default:
                return (0, rxjs_1.throwError)(() => "@ngx-env/builder: Invalid builder mode");
        }
    }));
};
exports.buildWithPlugin = buildWithPlugin;
exports.default = (0, architect_1.createBuilder)(exports.buildWithPlugin);
